} else {
title <- unique(orig_data$experiment)
} # TODO: can I get the experiment information from somewhere in the model?
orig_data <- tar_read(data_eegnet)
# from rfx_vis function
data <- ranef(model)$subject
data_long <- data %>%
select("(Intercept)") %>%
pivot_longer(
cols = names(.), #-c("subject"), #, # Select columns starting with "est"
names_to = "level",         # Create the "level" column
values_to = "mean" # Create the "conditional mean" column
)
if (any(startsWith(data_long$level, "experiment"))) {
title <- "ALL"
} else {
title <- unique(orig_data$experiment)
} # TODO: can I get the experiment information from somewhere in the model?
data_long
data_long <- data %>%
select("(Intercept)") %>%
pivot_longer(
cols = names(.), #-c("subject"), #, # Select columns starting with "est"
names_to = "subject",         # Create the "level" column
values_to = "mean" # Create the "conditional mean" column
)
data_long
data
names(data)
rownames(data)
data
data <- ranef(model)$subject %>%
mutate(subject = rownames(.))
data
data <- ranef(model)$subject %>%
mutate(subject = rownames(.)) %>%
mutate(intercept = "(Intercept)") %>%
select(c(intercept, subject))
data
?pivot_longer
data <- ranef(model)$subject %>%
mutate(subject = rownames(.)) %>%
mutate(intercept = .["(Intercept)"]) %>%
select(c(intercept, subject))
rownames(data) <- NULL
data
data <- ranef(model)$subject %>%
mutate(subject = rownames(.)) %>%
mutate(intercept = `(Intercept)`) %>%
select(c(intercept, subject))
rownames(data) <- NULL
data
?left_join
data2 <- left_join(data, demo, c("subject", "participant_id"))
demo
data
data2 <- left_join(data, demo, c("subject" = "participant_id"))
data
data2
ggplot(data, aes(x=age, y=intercept, fill=sex, shape=handedness)) +
geom_point()
# merge with demo
data <- left_join(data, demo, c("subject" = "participant_id"))
# plot age
ggplot(data, aes(x=age, y=intercept, fill=sex, shape=handedness)) +
geom_point()
ggplot(data, aes(x=age, y=intercept, fill=sex, shape=handedness)) +
geom_point() +
facet_grid(sex ~handedness)
ggplot(data, aes(x=age, y=intercept, color=sex, shape=handedness)) +
geom_point() +
facet_grid(sex ~ .)
# plot age
ggplot(data, aes(x=age, y=intercept, color=sex, shape=handedness)) +
geom_point() #+
#facet_grid(sex ~ .)
ggplot(data, aes(x=age, y=intercept, color=sex, shape=handedness)) +
geom_point() +
geom_line()
ggplot(data, aes(x=age, y=intercept, color=sex, shape=handedness)) +
geom_point() +
geom_smooth()
ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point()
#facet_grid(sex ~ .)
ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(0) +
labs(x="Age", y="Random Intercept")
# plot age
ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(aes(y.intercept=0) +
labs(x="Age", y="Random Intercept")
# plot age
ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(aes(yintercept=0)) +
labs(x="Age", y="Random Intercept")
ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Age", y="Random Intercept")
ggplot(data, aes(x=sex, y=intercept)) +
boxplot(notches=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept")
ggplot(data, aes(x=sex, y=intercept)) +
geom_boxplot(notches=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept")
ggplot(data, aes(x=sex, y=intercept)) +
geom_boxplot(notch=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept")
# plot age
p1 <- ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Age", y="Random Intercept")
p2 <- ggplot(data, aes(x=sex, y=intercept, fill=sex)) +
geom_boxplot(notch=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept")
ggarrange(p1,p2)
library(ggpubr)
# plot age
p1 <- ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Age", y="Random Intercept")
p2 <- ggplot(data, aes(x=sex, y=intercept, fill=sex)) +
geom_boxplot(notch=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept")
ggarrange(p1,p2)
p2 <- ggplot(data, aes(x=sex, y=intercept, fill=sex)) +
geom_boxplot(notch=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept") +
guides(color = FALSE)
# plot age
p1 <- ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Age", y="Random Intercept")
p2 <- ggplot(data, aes(x=sex, y=intercept, fill=sex)) +
geom_boxplot(notch=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept") +
guides(color = "none")
ggarrange(p1,p2)
p2 <- ggplot(data, aes(x=sex, y=intercept, fill=sex)) +
geom_boxplot(notch=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept") +
guides(fill = "none")
ggarrange(p1,p2)
demo
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram()
ÃŸ3
p3
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram() +
geom_vline(aes(xintercept=0), lty="dashed") +
labs(x="Random Intercept", y="Count") +
scale_fill_viridis_d()
p3
ggarrange(p1,p2,p3)
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram() +
geom_vline(aes(xintercept=0), lty="dashed") +
labs(x="Random Intercept", y="Count") +
scale_fill_brewer()
p3
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram() +
geom_vline(aes(xintercept=0), lty="dashed") +
labs(x="Random Intercept", y="Count") +
scale_fill_discrete()
p3
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram() +
geom_vline(aes(xintercept=0), lty="dashed") +
labs(x="Random Intercept", y="Count") +
scale_fill_fermenter()
p3
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram() +
geom_vline(aes(xintercept=0), lty="dashed") +
labs(x="Random Intercept", y="Count") +
scale_fill_identity()
p3
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram() +
geom_vline(aes(xintercept=0), lty="dashed") +
labs(x="Random Intercept", y="Count") +
scale_fill_viridis_d()
ggarrange(p1,p2,p3)
tar_make()
tar_read(demographics)
tar_read(demographics)
tar_make()
tar_read(demographics)
tar_read(demographics)
tar_make()
tar_make()
tar_make()
tar_read(rfx_demographics)
models <- tar_read(models_combined)
models <- tar_read(eegnet_HLM_exp)
models
model <- tar_read(eegnet_HLM_exp, branches=1)[[1]] # TODO: use pattern, and then combine the results
data <- ranef(model)
data
data <- ranef(model)$subject %>%
mutate(subject = rownames(.)) %>%
mutate(Intercept = `(Intercept)`) %>%
select(c(Intercept, subject))
rownames(data) <- NULL
data
data <- tar_read(data_eegnet_exp, branches=1)[[1]] # to get the EXP information
data
data <- tar_read(data_eegnet_exp, branches=1) #[[1]] # to get the EXP information
data
unique(data$tar_group)
model <- tar_read(eegnet_HLM_exp, branches=1)[[1]] # TODO: use pattern, and then combine the results
data <- tar_read(data_eegnet_exp, branches=1) %>% filter(tar_group==1) # to get the EXP information
data
experiment = unique(data$experiment)
experiment
data <- ranef(model)$subject %>%
mutate(Subject = rownames(.)) %>%
mutate(Intercept = `(Intercept)`) %>%
mutate(Experiment = unique(.$experiment)) %>%
select(c(Intercept, subject))
data
model <- tar_read(eegnet_HLM_exp, branches=1)[[1]] # TODO: use pattern, and then combine the results
orig_data <- tar_read(data_eegnet_exp, branches=1) %>% filter(tar_group==1) # to get the EXP information
# start here
experiment = unique(orig_data$experiment)
data <- ranef(model)$subject %>%
mutate(Subject = subject) %>%
mutate(Intercept = `(Intercept)`) %>%
mutate(Experiment = unique(.$experiment)) %>%
select(c(Intercept, Subject, Experiment))
data
ranef(model)
data <- ranef(model)$subject %>%
mutate(Subject = rownames()) %>%
mutate(Intercept = `(Intercept)`) %>%
mutate(Experiment = unique(.$experiment)) %>%
select(c(Intercept, Subject, Experiment))
data <- ranef(model)$subject %>%
mutate(Subject = rownames(.)) %>%
mutate(Intercept = `(Intercept)`) %>%
mutate(Experiment = unique(.$experiment)) %>%
select(c(Intercept, Subject, Experiment))
data <- ranef(model)$subject %>%
mutate(Subject = rownames(.)) %>%
mutate(Intercept = `(Intercept)`) %>%
mutate(Experiment = unique(orig_data$experiment)) %>%
select(c(Intercept, Subject, Experiment))
rownames(data) <- NULL
data
tar_make()
tar_read(rfx_exp)
tar_read(rfx_exp, branches=1)
tar_read(eegnet_HLM_exp, branches=1)
tar_read(data_eegnet_exp, branches=1)
tar_make()
tar_read(rfx_exp)
rbind(tar_read(rfx_exp))
tar_make()
tar_read(rfx_exp)
data <- tar_read(rfx_exp)
data
data %>%
group_by(Experiment) %>%
mutate(intercept_rank = rank(Intercept, ties.method = "min")) %>%
ggplot(aes(x = intercept_rank, y = Experiment, color = Subject, group = Subject)) +
geom_point(size = 3) +
geom_line() +
facet_wrap(~ Experiment, scales = "free") +
theme_bw()
data %>%
group_by(Experiment, Subject) %>%
summarize(Intercept = Intercept) %>% # Assuming you want the raw values
pivot_wider(names_from = Experiment, values_from = Intercept) %>%
ggplot(aes(x = Subject, y = Experiment)) +
geom_tile(aes(fill = Intercept)) +
scale_fill_gradient2() +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data
data %>%
ggplot(aes(x = Experiment, y = Intercept, col=Subject)) +
line()
data
ggplot(data, aes(x = Experiment, y = Intercept, col=Subject)) +
geom_line()
ggplot(data, aes(x = Experiment, y = Intercept, color=Subject)) +
geom_line()
data
ggpaired(data, x = "Experiment", y = "Intercept",
color = "Subject",
line.color = "gray", line.size = 0.4,
palette = "jco")+
stat_compare_means(paired = TRUE)
?ggpairs
??ggpairs
library("GGally")
install.packages("GGally")
library("GGally")
?ggpairs
ggpairs(data)
data
wide_data <- data %>% pivot_wider(names_from = Experiment, values_from = "Intercept")
wide_data
ggpairs(data, aes(col=Subject))
ggpairs(wide_data)
ggpairs(wide_data, aes(col=Subject))
ggpairs(wide_data, aes(color=Subject))
wide_data <- data %>%
pivot_wider(names_from = Experiment, values_from = "Intercept") %>%
select(-c("Subject")) # remove sub for now
ggpairs(wide_data)
tar_make()
tar_make()
tar_read(rfx_exp_plt)
tar_make()
tar_read(heatmaps)
tar_make()
source("~/GitHub/m4d/targets/renv/activate.R", echo=TRUE)
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_read(rfx_demographics)
#| echo: false
tar_read(heatmaps_plot)
#| echo: false
tar_read(heatmaps_file)
#| echo: false
tar_read(heatmaps)
tar_make()
tar_visnetwork()
model = tar_read(sliding_LMi_exp, branches=1)
model
model = tar_read(sliding_LMi_exp, branches=1)[[1]]
model
summary(model)
model = tar_read(sliding_LMi_exp, branches=1)[[1]]
summary(model)
tar_make()
model = tar_read(sliding_LMi_exp, branches=1)[[1]]
summary(model)
tar_make()
model = tar_read(sliding_LMi_exp, branches=1)[[1]]
summary(model)
tar_make()
model = tar_read(sliding_LMi_exp, branches=1)[[1]]
summary(model)
model = tar_read(sliding_LM_exp, branches=1)[[1]]
summary(model)
source("~/GitHub/m4d/targets/renv/activate.R", echo=TRUE)
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
library(JuliaCall)
options(JULIA_HOME = "/Users/roman/.julia/juliaup/julia-1.10.2+0.aarch64.apple.darwin14/bin/")
julia_library("MixedModels")
julia_library("RCall")
julia_library("DataFrames")
julia_library("StatsModels")
julia_assign("dat",nlme::Machines)
julia_command("my_mod = fit(MixedModel, @formula(score ~ 1 + Machine + (1 + Machine|Worker)),dat)")
julia_library("JellyMe4")
julia_eval("(my_mod,dat)")
julia_eval("RCall.Const.GlobalEnv[:m_machines] = robject(:my_mod, m_machines)") #https://github.com/palday/JellyMe4.jl/issues/72
julia_eval("RCall.Const.GlobalEnv[:dat] = robject(:my_mod, dat)") #https://github.com/palday/JellyMe4.jl/issues/72
julia_command("my_mod = fit(MixedModel, @formula(score ~ 1 + Machine + (1 + Machine|Worker)),dat)")
julia_library("JellyMe4")
julia_command("return_mod = (my_mod, dat)")
julia_command("RCall.Const.GlobalEnv[:return_mod] = robject(:my_mod, dat)")
julia_command("RCall.Const.GlobalEnv[:return_mod] = robject(:lmerMod, return_mod)")
tar_make()
tar_make()
tar_make()
Sys.getenv('R_HOME')
Sys.getenv('RSTUDIO_WHICH_R')
R.version$version.string
ls -l /Library/Frameworks/R.framework/Versions/
available_packages <- available.packages()
package_name <- "Matrix"
versions <- available_packages[rownames(available_packages) == package_name, ]
print(versions)
# Find packages with multiple versions
multiple_versions <- names(table(available_packages$Package))[
table(available_packages$Package) > 1
]
multiple_versions <- names(table(available_packages$Package))[
table(available_packages$Package) > 1
]
# Count the number of versions for each package
package_counts <- table(available_packages$Package)
package_counts <- table(available_packages$Package)
package_names <- available_packages[, "Package"]
package_names
package_counts <- table(package_names)
package_counts
multiple_versions <- names(package_counts[package_counts > 1])
multiple_versions
package_counts['Matrix']
package_names['Matrix']
versions["Matrix"]
versions
tools::package_dependencies("Matrix", which = "LinkingTo", reverse = TRUE)[[1L]]
library(Matrix)
data = tar_read(data_eegnet_exp, branches=1)[[0]] %>% filter(experiment == "ERN")
library(dplyr)
data = tar_read(data_eegnet_exp, branches=1)[[0]] %>% filter(experiment == "ERN")
data = tar_read(data_eegnet_exp, branches=1)[[1]] %>% filter(experiment == "ERN")
tar_read(data_eegnet_exp, branches=1)[[1]]
tar_read(data_eegnet_exp, branches=1)[1]
tar_read(data_eegnet_exp, branches=1)
data = tar_read(data_eegnet_exp, branches=1) %>% filter(experiment == "ERN")
julia_library("Parsers")
julia_library("DataFrames")
julia_library("CSV")
julia_library("Plots")
julia_library("MixedModels")
julia_command("ENV['LMER'] = 'afex::lmer_alt'") # set before import RCall and JellyMe4 to be able to convert zerocorr(rfx) correctly
Sys.getenv(LMER)
Sys.getenv('LMER')
Sys.setenv(LMER = "afex::lmer_alt")
Sys.getenv(LMER)
Sys.getenv('LMER')
julia_library("RCall")
julia_library("JellyMe4")
julia_library("RData")
julia_library("CategoricalArrays") # for categorical
julia_assign("data", data)
julia_command("formula = @formula(accuracy ~ (ref + hpf + lpf + emc) ^ 2 + zerocorr( (ref + hpf + lpf + emc) ^ 2 | subject))") ## todo all
julia_command("model = fit(LinearMixedModel, formula, data)")
julia_command("rmodel = (model, data);")
julia_command("RCall.Const.GlobalEnv[:rmodel] = robject(:lmerMod, rmodel)")
julia_command("RCall.Const.GlobalEnv[:rmodel] = robject(apex::lmerMod, rmodel)")
julia_command("RCall.Const.GlobalEnv[:rmodel] = robject(afex::lmerMod, rmodel)")
julia_command("RCall.Const.GlobalEnv[:rmodel] = robject(:afex::lmerMod, rmodel)")
julia_command("RCall.Const.GlobalEnv[:rmodel] = robject(:afex::lmer_alt, rmodel)")
julia_command("RCall.Const.GlobalEnv[:rmodel] = robject(:lmer_alt, rmodel)")
julia_command("ENV[\"LMER\"] = \"afex::lmer_alt\"") # set before import RCall and JellyMe4 to be able to convert zerocorr(rfx) correctly
julia_library("RCall")
julia_library("JellyMe4")
julia_library("RData")
julia_library("CategoricalArrays") # for categorical
julia_assign("data", data)
julia_command("formula = @formula(accuracy ~ (ref + hpf + lpf + emc) ^ 2 + zerocorr( (ref + hpf + lpf + emc) ^ 2 | subject))") ## todo all
julia_command("model = fit(LinearMixedModel, formula, data)")
julia_command("rmodel = (model, data);")
julia_command("RCall.Const.GlobalEnv[:rmodel] = robject(:lmerMod, rmodel)")
source("~/GitHub/m4d/targets/renv/activate.R", echo=TRUE)
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
library(dplyr)
library(JuliaCall)
data = tar_read(data_eegnet_exp, branches=1) %>% filter(experiment == "ERN")
julia_library("Parsers")
julia_library("DataFrames")
julia_library("CSV")
julia_library("Plots")
julia_library("MixedModels")
julia_command("ENV[\"LMER\"] = \"afex::lmer_alt\"") # set before import RCall and JellyMe4 to be able to convert zerocorr(rfx) correctly
julia_library("RCall")
julia_library("JellyMe4")
julia_library("RData")
julia_library("CategoricalArrays") # for categorical
julia_assign("data", data)
julia_command("formula = @formula(accuracy ~ (ref + hpf + lpf + emc) ^ 2 + zerocorr( (ref + hpf + lpf + emc) ^ 2 | subject))") ## todo all
julia_command("model = fit(LinearMixedModel, formula, data)")
julia_command("rmodel = (model, data);")
julia_command("RCall.Const.GlobalEnv[:rmodel] = robject(:lmerMod, rmodel)")
julia_eval("rmodel")
julia_command("RCall.Const.GlobalEnv[:rmodel] = robject(:lmerMod, rmodel)")
install.packages("afex")
julia_command("RCall.Const.GlobalEnv[:rmodel] = robject(:lmerMod, rmodel)")
julia_eval("rmodel")
julia_command("RCall.Const.GlobalEnv[:rmodel] = robject(:lmerMod, rmodel)")
jmodel <- julia_eval("rmodel")
jmodel <- julia_eval("(rmodel, data)")
rmodel
rmodel = NULL
data = tar_read(data_eegnet_exp, branches=1) %>% filter(experiment == "ERN")
julia_library("Parsers")
julia_library("DataFrames")
julia_library("CSV")
julia_library("Plots")
julia_library("MixedModels")
julia_command("ENV[\"LMER\"] = \"afex::lmer_alt\"") # set before import RCall and JellyMe4 to be able to convert zerocorr(rfx) correctly
#Sys.setenv(LMER = "afex::lmer_alt")
julia_library("RCall")
julia_library("JellyMe4")
julia_library("RData")
julia_library("CategoricalArrays") # for categorical
julia_assign("data", data)
julia_command("formula = @formula(accuracy ~ (ref + hpf + lpf + emc) ^ 2 + zerocorr( (ref + hpf + lpf + emc) ^ 2 | subject))") ## todo all
julia_command("model = fit(LinearMixedModel, formula, data)")
julia_command("rmodel = (model, data);")
julia_command("RCall.Const.GlobalEnv[:rmodel] = robject(:lmerMod, rmodel)")
rmodel
ranef(rmodel)
julia_command("model")
?julia_library
julia_library("Parsers", "DataFrames")
julia_library("Parsers, DataFrames")
tar_make()
