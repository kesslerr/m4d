small.gap = 5,
link.visible = data > 0.5,
grid.col = "grey",
col = col_fun,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(data)))))
)
chordDiagram(data,
transparency = 0,
symmetric = TRUE,
big.gap = 20,
small.gap = 5,
link.visible = data > 0.5,
grid.col = "grey",
col = col_fun,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(data)))))
)
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA) # here set bg.border to NA is important
chordDiagram(data,
transparency = 0,
symmetric = TRUE,
big.gap = 20,
small.gap = 5,
link.visible = data > 0.5,
grid.col = "black",
col = col_fun,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(data)))))
)
chordDiagram(data,
transparency = 0,
symmetric = TRUE,
big.gap = 20,
small.gap = 5,
link.visible = data > 0.5,
grid.col = "black",
col = col_fun,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(data)))))
)
circos.track(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
xplot = get.cell.meta.data("xplot")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
if(abs(xplot[2] - xplot[1]) < 10) {
circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
niceFacing = TRUE, adj = c(0, 0.5), col = "red")
} else {
circos.text(mean(xlim), ylim[1], sector.name, facing = "inside",
niceFacing = TRUE, adj = c(0.5, 0), col= "blue")
}
chordDiagram(data,
transparency = 0,
symmetric = TRUE,
big.gap = 20,
small.gap = 5,
link.visible = data > 0.5,
grid.col = "black",
col = col_fun,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(data)))))
)
circos.track(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
xplot = get.cell.meta.data("xplot")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
if(abs(xplot[2] - xplot[1]) < 100) {
circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
niceFacing = TRUE, adj = c(0, 0.5), col = "red")
} else {
circos.text(mean(xlim), ylim[1], sector.name, facing = "inside",
niceFacing = TRUE, adj = c(0.5, 0), col= "blue")
}
}, bg.border = NA)
chordDiagram(data,
transparency = 0,
symmetric = TRUE,
big.gap = 20,
small.gap = 5,
link.visible = data > 0.5,
grid.col = "black",
col = col_fun,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(data)))))
)
circos.track(track.index = 1, panel.fun = function(x, y) {
xlim = get.cell.meta.data("xlim")
xplot = get.cell.meta.data("xplot")
ylim = get.cell.meta.data("ylim")
sector.name = get.cell.meta.data("sector.index")
if(abs(xplot[2] - xplot[1]) < 100) {
circos.text(mean(xlim), ylim[1], sector.name, facing = "clockwise",
niceFacing = TRUE, adj = c(0, 0.5), col = "red")
} else {
circos.text(mean(xlim), ylim[1], sector.name, facing = "inside",
niceFacing = TRUE, adj = c(0.5, 0), col= "blue")
}
}, bg.border = NA)
chordDiagram(data,
transparency = 0,
symmetric = TRUE,
big.gap = 20,
small.gap = 5,
link.visible = data > 0.5,
grid.col = "black",
col = col_fun,
preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(data)))))
)
replacements
varnames <- c("ref","hpf","lpf","emc","mac","base","det","ar")
varnames <- recode(varnames, !!!replacements)
library(dplyr)
varnames <- c("ref","hpf","lpf","emc","mac","base","det","ar")
varnames <- recode(varnames, !!!replacements)
varnames
numbers <- c(0.1,1,1,0.1,0.1,0.1,0.1,1,
1,0.1,1,1,1,1,1,1,
1,1,0.1,1,1,1,1,1,
0.1,1,1,0.1,1,0.1,0.1,1,
0.1,1,1,1,0.1,0.1,0.1,1,
0.1,1,1,0.1,0.1,0.1,1,0.1,
0.1,1,1,0.1,0.1,1,0.1,0.1,
1,1,1,1,1,0.1,0.1,0.1)
data <- matrix( numbers, ncol=8)
rownames(data) <- varnames
colnames(data) <- varnames
col_fun = colorRamp2(range(data), c("#ddd8d5", "#4e4b44"), transparency = 0.5)
chordDiagram(data,
transparency = 0,
symmetric = TRUE,
big.gap = 20,
small.gap = 5,
link.visible = data > 0.5,
grid.col = "black",
col = col_fun,
)
chordDiagram(data,
transparency = 0,
symmetric = TRUE,
big.gap = 20,
small.gap = 5,
link.visible = data > 0.5,
grid.col = "black",
col = col_fun,
annotationTrack =  c("name", "grid"))
)
tar_make()
tar_read(interaction_chordplot_prior)
chordDiagram(data,
transparency = 0,
symmetric = TRUE,
big.gap = 20,
small.gap = 5,
link.visible = data > 0.5,
grid.col = "black",
col = col_fun,
#preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(data)))))
)
p <- chordDiagram(data,
transparency = 0,
symmetric = TRUE,
big.gap = 20,
small.gap = 5,
link.visible = data > 0.5,
grid.col = "black",
col = col_fun,
#preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(data)))))
)
p
?chordDiagram
chordDiagram(data,
transparency = 0,
symmetric = TRUE,
big.gap = 20,
small.gap = 5,
link.visible = data > 0.5,
grid.col = "black",
col = col_fun,
#preAllocateTracks = list(track.height = max(strwidth(unlist(dimnames(data)))))
)
title(main = "Naive vs. Transplant")
?png
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
tar_reaad(eegnet_HLM_exp_emm_means)
tar_read(eegnet_HLM_exp_emm_means)
eegnet_HLM_exp_emm_means_ungrouped
tar_read(eegnet_HLM_exp_emm_means_ungrouped)
tar_read(rfx_exp_plot)
tar_read(eegnet_HLM_exp_emm_omni_ungrouped)
tar_visnetwork(targets_only = TRUE)
tar_visnetwork(targets_only = TRUE)
tar_make()
tar_read(sliding_LM_exp_emm_omni_ungrouped)
data <- tar_read(sliding_LM_exp_emm_omni_ungrouped)
output <- data %>%
select(c(variable, level.1, level.2, experiment, significance)) %>%
pivot_wider(
names_from = experiment,
values_from = significance
) %>%
mutate(across(everything(), ~ if_else(is.na(.x), "/", .x))) %>%
xtable(type="latex",
label=thisLabel,
caption=thisCaption)
library(xtable)
output <- data %>%
select(c(variable, level.1, level.2, experiment, significance)) %>%
pivot_wider(
names_from = experiment,
values_from = significance
) %>%
mutate(across(everything(), ~ if_else(is.na(.x), "/", .x))) %>%
xtable(type="latex",
label=thisLabel,
caption=thisCaption)
library(dplyr)
output <- data %>%
select(c(variable, level.1, level.2, experiment, significance)) %>%
pivot_wider(
names_from = experiment,
values_from = significance
) %>%
mutate(across(everything(), ~ if_else(is.na(.x), "/", .x))) %>%
xtable(type="latex",
label=thisLabel,
caption=thisCaption)
library(tidyr)
library(tidyverse)
output <- data %>%
select(c(variable, level.1, level.2, experiment, significance)) %>%
pivot_wider(
names_from = experiment,
values_from = significance
) %>%
mutate(across(everything(), ~ if_else(is.na(.x), "/", .x))) %>%
xtable(type="latex",
label=thisLabel,
caption=thisCaption)
output <- data %>%
select(c(`model term`, experiment, sign.fdr)) %>%
pivot_wider(
names_from = experiment,
values_from = sign.fdr
) %>%
mutate(across(everything(), ~ if_else(is.na(.x), "/", .x))) %>%
xtable(type="latex",
label=thisLabel,
caption=thisCaption)
tar_make()
tar_read(sliding_LM_exp_emm_omni_unlist)
tar_read(sliding_LM_exp_emm_omni_unlist) == tar_read(sliding_LM_exp_emm_omni)
tar_read(sliding_LM_exp_emm_omni_unlist) == tar_read(sliding_LM_exp_emm_omni_ungrouped)
tar_read(sliding_LM_exp_emm_omni_unlist)
tar_read(sliding_LM_exp_emm_omni_ungrouped)
unique(tar_read(sliding_LM_exp_emm_omni_ungrouped)$experiment)
unique(tar_read(sliding_LM_exp_emm_omni_ungrouped)[1:4,:]$experiment)
unique(tar_read(sliding_LM_exp_emm_omni_ungrouped)[1:4,]$experiment)
type(unique(tar_read(sliding_LM_exp_emm_omni_ungrouped)[1:4,]$experiment))
class(unique(tar_read(sliding_LM_exp_emm_omni_ungrouped)[1:4,]$experiment))
tar_read(sliding_LM_exp_emm_omni_ungrouped)
tar_read(sliding_LM_exp_emm)
tar_visnetwork(targets_only = TRUE)
tar_make()
tar_read(sliding_LM_exp_emm_omni)
tar_read(eegnet_HLM_exp_emm_omni)
tar_visnetwork(targets_only = TRUE)
tar_read(sliding_LM_exp_emm_means)
tar_read(sliding_LM_exp_emm_contrasts)
tar_visnetwork(targets_only = TRUE)
tar_make()
tar_visnetwork(targets_only = TRUE)
tar_make()
tar_read(eegnet_HLM_qq_comb)
tar_make()
tar_read(sliding_LM_sasrvf_comb)
tar_read(eegnet_RFX_plot)
tar_read(rfx_exp)
tar_read(rfx_exp_plot)
data = tar_read(data_eegnet_exp, branches=1)
data
unique(data$experiment)
data = tar_read(data_eegnet_exp, branches=1) %>% filter(experiment == "ERN")
julia_library("Parsers, DataFrames, CSV, Plots, MixedModels, RData, CategoricalArrays")
library(JuliaCall)
julia_library("Parsers, DataFrames, CSV, Plots, MixedModels, RData, CategoricalArrays")
options(JULIA_HOME = "/Users/roman/.julia/juliaup/julia-1.10.2+0.aarch64.apple.darwin14/bin/")
julia_library("RCall, JellyMe4")
julia_assign("data", data) # bring data into julia
tar_make()
tar_make()
tar_make()
tar_make()
tar_make()
data = tar_read(data_eegnet_exp, branches=1) %>% filter(experiment == "ERN")
interactions = TRUE
julia_library("Parsers, DataFrames, CSV, Plots, MixedModels, RData, CategoricalArrays")
if (interactions == TRUE){
julia_command("ENV[\"LMER\"] = \"afex::lmer_alt\"") # set before import RCall and JellyMe4 to be able to convert zerocorr(rfx) correctly; https://github.com/palday/JellyMe4.jl (ReadMe)
} # caution, if zerocorr is used, now julia will automatically use afex::lmer_alt, and from then on, use lmer_alt for the remainder of the session
julia_library("RCall, JellyMe4")
julia_assign("data", data) # bring data into julia
if (interactions == FALSE){
julia_command("formula = @formula(accuracy ~ ref + hpf + lpf + emc + mac + base + det + ar + (ref + hpf + lpf + emc + mac + base + det + ar | subject));")
} else {
julia_command("formula = @formula(accuracy ~ (ref + hpf + lpf) ^ 2 + zerocorr( (ref + hpf + lpf) ^ 2 | subject));") ## TODO all variables
}
julia_command("model = fit(LinearMixedModel, formula, data);")  # , verbose=false
julia_command("model")
julia_command("rmodel = (model, data);") # make it a tuple for conversion (Julia model doesn't have the data, but R model does); https://github.com/palday/JellyMe4.jl/issues/51,
julia_command("RCall.Const.GlobalEnv[:rmodel] = robject(:lmerMod, rmodel);") # alternative to @rput; https://github.com/palday/JellyMe4.jl/issues/72
tar_make()
str(FALSE)
char(FALSE)
as.char(FALSE)
as.character(FALSE)
tar_make()
tar_make()
data = tar_read(data_eeget)
data = tar_read(data_eegnet)
julia_library("Parsers, DataFrames, CSV, Plots, MixedModels, RData, CategoricalArrays, RCall, JellyMe4, GLM, Statistics")
interactions = c()
experiments = c()
r2s = c()
for (interaction in c(TRUE, FALSE)){
for (experiment in unique(data$experiment)){
data_tmp <- data %>% filter(experiment == experiment)
julia_assign("data", data_tmp) # bring data into julia
if (interaction == TRUE){
julia_command("formula = @formula(accuracy ~ (ref + hpf + lpf + emc + mac + base + det + ar) ^ 2 + zerocorr( (ref + hpf + lpf + emc + mac + base + det + ar) ^ 2 | subject));")
} else {
julia_command("formula = @formula(accuracy ~ ref + hpf + lpf + emc + mac + base + det + ar + (ref + hpf + lpf + emc + mac + base + det + ar | subject));")
}
julia_command("model = fit(LinearMixedModel, formula, data);")
julia_command("predictions = predict(model, data);")
r2s <- c(r2s,julia_eval("cor(predictions, data.accuracy)^2;"))
experiments <- c(experiments, experiment)
interactions <- c(interactions, tolower(str(interaction)))
}
}
experiments
interactions
r2
r2s
tar_make()
julia_library("Parsers, DataFrames, CSV, Plots, MixedModels, RData, CategoricalArrays, RCall, JellyMe4, GLM, Statistics")
interactions = c()
experiments = c()
r2s = c()
for (interaction in c(TRUE, FALSE)){
for (experiment in unique(data$experiment)){
data_tmp <- data %>% filter(experiment == experiment)
julia_assign("data", data_tmp) # bring data into julia
if (interaction == TRUE){
julia_command("formula = @formula(accuracy ~ (ref + hpf + lpf + emc + mac + base + det + ar) ^ 2 + zerocorr( (ref + hpf + lpf + emc + mac + base + det + ar) ^ 2 | subject));")
} else {
julia_command("formula = @formula(accuracy ~ ref + hpf + lpf + emc + mac + base + det + ar + (ref + hpf + lpf + emc + mac + base + det + ar | subject));")
}
julia_command("model = fit(LinearMixedModel, formula, data);")
julia_command("predictions = predict(model, data);")
r2s <- c(r2s,julia_eval("cor(predictions, data.accuracy)^2;"))
experiments <- c(experiments, experiment)
interactions <- c(interactions, tolower(as.character(interaction)))
}
}
data.frame(experiments, interactions, r2s, col.names = c("experiment", "interactions", "r2"))
r2s
interactions
experiments
?data.frame
data.frame(experiments, interactions, r2s, row.names = c("experiment", "interactions", "r2"))
data.frame(experiment=experiments, interactions=interactions, r2=r2s)
r2s
julia_eval("cor(predictions, data.accuracy)^2;")
julia_eval("cor(predictions, data.accuracy)^2")
julia_eval("predictions")
data_tmp
experiment
data_tmp <- data %>% filter(.$experiment == experiment)
data_tmp
experiment
thisExperiment = experiment
data_tmp <- data %>% filter(experiment == thisExperiment)
data_tmp
interactions = c()
experiments = c()
r2s = c()
for (interaction in c(TRUE, FALSE)){
for (thisExperiment in unique(data$experiment)){
data_tmp <- data %>% filter(experiment == thisExperiment)
julia_assign("data", data_tmp) # bring data into julia
if (interaction == TRUE){
julia_command("formula = @formula(accuracy ~ (ref + hpf + lpf + emc + mac + base + det + ar) ^ 2 + zerocorr( (ref + hpf + lpf + emc + mac + base + det + ar) ^ 2 | subject));")
} else {
julia_command("formula = @formula(accuracy ~ ref + hpf + lpf + emc + mac + base + det + ar + (ref + hpf + lpf + emc + mac + base + det + ar | subject));")
}
julia_command("model = fit(LinearMixedModel, formula, data);")
julia_command("predictions = predict(model, data);")
r2s <- c(r2s,julia_eval("cor(predictions, data.accuracy)^2;"))
experiments <- c(experiments, thisExperiment)
interactions <- c(interactions, tolower(as.character(interaction)))
}
}
data.frame(experiment=experiments, interactions=interactions, r2=r2s)
r2_table = data.frame(experiment=experiments, interactions=interactions, r2=r2s)
ggplot(r2_table, aes(y=accuracy, x=experiment, fill=interactions)) +
geom_bar()
ggplot(r2_table, aes(y=accuracy, x=experiment, fill=interactions)) +
geom_bar()
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar()
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity")
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "dodge")
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge")
ggplot(r2_table, aes(x = category, y = value)) +
geom_col(width = 0.8) +  # Make bars slightly narrower
geom_col(aes(y = 1), fill = "white", width = 0.8) +  # Overlay white bars
scale_y_continuous(limits = c(0, 1), labels = scales::percent) +
labs(x = "Category", y = "Percentage Filled") +
theme_minimal()
ggplot(r2_table, aes(x = experiment, y = r2)) +
geom_col(width = 0.8) +  # Make bars slightly narrower
geom_col(aes(y = 1), fill = "white", width = 0.8) +  # Overlay white bars
scale_y_continuous(limits = c(0, 1), labels = scales::percent) +
labs(x = "Category", y = "Percentage Filled") +
theme_minimal()
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge")
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge")  +
scale_fill_viridis_c()
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge")  +
scale_fill_viridis_d()
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge")  +
scale_fill_viridis_d(begin=0.2)
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge") + scale_fill_viridis_d(begin=0.4)
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge") + scale_fill_viridis_d(begin=0.6)
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge") + scale_fill_viridis_d(begin=5)
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge") + scale_fill_viridis_d(begin=0.4, end=0.5)
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge") + scale_fill_viridis_d(begin=0.4, end=0.8)
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge") + scale_fill_viridis_d(begin=0.4, end=0.9)
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge") + scale_fill_grey()
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge") + scale_fill_grey(start=0, end=0.6)
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge") + scale_fill_grey(start=0.4, end=0.6)
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge") + scale_fill_grey(start=0.3, end=0.6)
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) +
geom_bar(stat = "identity", position="dodge") + scale_fill_grey(start=0.2, end=0.6)
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) + geom_bar(stat = "identity", position="fill") + scale_fill_grey(start=0.2, end=0.6)
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) + geom_bar(stat = "identity", position=c("dodge","fill")) + scale_fill_grey(start=0.2, end=0.6)
ggplot(r2_table, aes(y=r2, x=experiment, fill=interactions)) + geom_bar(stat = "identity", position="dodge") + scale_fill_grey(start=0.2, end=0.6)
tar_visnetwork()
tar_visnetwork(targets_only = TRUE)
tar_make()
tar_target(eegnet_HLM_exp, branches=1)
tar_read(eegnet_HLM_exp, branches=1)
tar_read(eegnet_HLM_exp, branches=1)[1]
model <- tar_read(eegnet_HLM_exp, branches=1)[1]
models <- summary(model)
corrs <-
{if (class(model) == "lmerMod") models$vcov else
if (class(model) == "lm") models$cov.unscaled} %>%
cov2cor() %>%
{ .[lower.tri(., diag = FALSE)] }
class(model)
if (class(model) == "list"){model <- model[[1]]}
model
class(model)
models <- summary(model)
models$vcov
class(model)
class(model)[1]
class(model)[2]
class(model)[1]
corrs <-
{if (class(model) %in% c("lmerMod","lmerModLmerTest")) models$vcov else
if (class(model) == "lm") models$cov.unscaled} %>%
cov2cor() %>%
{ .[lower.tri(., diag = FALSE)] }
(class(model) %in% c("lmerMod","lmerModLmerTest"))
models$vcov
cov2cor(models$vcov)
all(models$vcov == t(models$vcov))
all(matrix(models$vcov) == t(matrix(models$vcov)))
matrix(models$vcov)
as.matrix(models$vcov)
corrs <-
{if (class(model) %in% c("lmerMod","lmerModLmerTest")) as.matrix(models$vcov) else
if (class(model) == "lm") models$cov.unscaled} %>%
cov2cor() %>%
{ .[lower.tri(., diag = FALSE)] }
corrs
tar_make()
tar_visnetwork()
tar_visnetwork(targets_only = TRUE)
