mutate(variable = fct_reorder(variable, level,
.desc = ifelse(variable == "low pass", TRUE, FALSE)))
?fct_reorder
tar_visnetwork()
tar_visnetwork()
tar_make()
?lm
??latex.lm
install.packages("equatiomatic")
remotes::install_github("datalorax/equatiomatic")
install.packages("remotes")
remotes::install_github("datalorax/equatiomatic")
install.packages("equatiomatic")
install.packages("cars")
install.packages("car")
install.packages("equatiomatic")
remotes::install_github("datalorax/equatiomatic")
remotes::install_github("datalorax/equatiomatic")
library(equatiomatic)
model <- tar_read(sliding_LM)
# Give the results to extract_eq
extract_eq(mod1)
model <- tar_read(sliding_LM_exp, branches=1)[[1]]
# Give the results to extract_eq
extract_eq(mod1)
data(mtcars)
data <- data(mtcars)
data
data(mtcars)
mtcars
model1 <- lm(mpg ~cyl + vs + am, data = mtcars)
# Give the results to extract_eq
extract_eq(model)
?extract_eq
extract_eq(model,
var_colors="blue",
var_subscript_colors="darkred",
wrap=TRUE, # this and next line wrap the function
terms_per_line = 4)
model <- tar_read(sliding_LM)
# Give the results to extract_eq
extract_eq(model,
intercept = "beta", # make it beta_0 instead of alpha
#var_colors=c("blabla"="blue"),
#var_subscript_colors=c("blabla"=darkred)",
wrap=TRUE, # this and next line wrap the function
terms_per_line = 5,
# swap_var_names
)
model <- tar_read(eegnet_HLM)
# Give the results to extract_eq
extract_eq(model,
intercept = "beta", # make it beta_0 instead of alpha
#var_colors=c("blabla"="blue"),
#var_subscript_colors=c("blabla"=darkred)",
wrap=TRUE, # this and next line wrap the function
terms_per_line = 5,
# swap_var_names
)
# Give the results to extract_eq
extract_eq(model,
#intercept = "beta", # make it beta_0 instead of alpha
#var_colors=c("blabla"="blue"),
#var_subscript_colors=c("blabla"=darkred)",
wrap=TRUE, # this and next line wrap the function
terms_per_line = 5,
# swap_var_names
)
model <- tar_read(eegnet_HLM_exp, branches=1)[[1]]
# Give the results to extract_eq
extract_eq(model,
#intercept = "beta", # make it beta_0 instead of alpha
#var_colors=c("blabla"="blue"),
#var_subscript_colors=c("blabla"=darkred)",
wrap=TRUE, # this and next line wrap the function
terms_per_line = 5,
# swap_var_names
)
model <- tar_read(sliding_LM)
# Give the results to extract_eq
extract_eq(model,
intercept = "beta", # make it beta_0 instead of alpha
#var_colors=c("blabla"="blue"),
#var_subscript_colors=c("blabla"=darkred)",
wrap=TRUE, # this and next line wrap the function
terms_per_line = 5,
# swap_var_names
)
?lm
?lme4::lmer
tar_make()
tar_make()
tar_make()
tar_read(demographics_file)
tar_make()
tar_make()
tar_read(demographics)
?read_csv
tar_make()
tar_read(demographics)
tar_read(demographics) %>% as.factor()
?as.factor?
?as.factor
tar_read(demographics) %>% lapply(.[,c("participant_id", "sex", "handedness")] , factor)
tar_read(demographics) %>% lapply(.[,c(participant_id, sex, handedness)] , factor)
library(magrittr)
tar_read(demographics) %<>% mutate_at(c("participant_id", "sex", "handedness"), factor)
tar_read(demographics)
data <- tar_read(demographics)
data %<>% mutate_at(c("participant_id", "sex", "handedness"), factor)
data
data <- tar_read(demographics)
data
tar_read(eegnet_RFX_plot)
demo <- tar_read(demographics)
model <- tar_read(eegnet_HLM) # TODO, also branches
# from rfx_vis function
data <- ranef(model)$subject
data_long <- data %>%
pivot_longer(
cols = names(.), #-c("subject"), #, # Select columns starting with "est"
names_to = "level",         # Create the "level" column
values_to = "mean" # Create the "conditional mean" column
)
if (any(startsWith(data_long$level, "experiment"))) {
title <- "ALL"
} else {
title <- unique(orig_data$experiment)
} # TODO: can I get the experiment information from somewhere in the model?
data
data_long
data_long <- data %>%
select(´(Intercept)´) %>%
data_long <- data %>%
select("Intercept") %>%
pivot_longer(
cols = names(.), #-c("subject"), #, # Select columns starting with "est"
names_to = "level",         # Create the "level" column
values_to = "mean" # Create the "conditional mean" column
)
data_long <- data %>%
select("(Intercept)") %>%
pivot_longer(
cols = names(.), #-c("subject"), #, # Select columns starting with "est"
names_to = "level",         # Create the "level" column
values_to = "mean" # Create the "conditional mean" column
)
if (any(startsWith(data_long$level, "experiment"))) {
title <- "ALL"
} else {
title <- unique(orig_data$experiment)
} # TODO: can I get the experiment information from somewhere in the model?
orig_data <- tar_read(data_eegnet)
# from rfx_vis function
data <- ranef(model)$subject
data_long <- data %>%
select("(Intercept)") %>%
pivot_longer(
cols = names(.), #-c("subject"), #, # Select columns starting with "est"
names_to = "level",         # Create the "level" column
values_to = "mean" # Create the "conditional mean" column
)
if (any(startsWith(data_long$level, "experiment"))) {
title <- "ALL"
} else {
title <- unique(orig_data$experiment)
} # TODO: can I get the experiment information from somewhere in the model?
data_long
data_long <- data %>%
select("(Intercept)") %>%
pivot_longer(
cols = names(.), #-c("subject"), #, # Select columns starting with "est"
names_to = "subject",         # Create the "level" column
values_to = "mean" # Create the "conditional mean" column
)
data_long
data
names(data)
rownames(data)
data
data <- ranef(model)$subject %>%
mutate(subject = rownames(.))
data
data <- ranef(model)$subject %>%
mutate(subject = rownames(.)) %>%
mutate(intercept = "(Intercept)") %>%
select(c(intercept, subject))
data
?pivot_longer
data <- ranef(model)$subject %>%
mutate(subject = rownames(.)) %>%
mutate(intercept = .["(Intercept)"]) %>%
select(c(intercept, subject))
rownames(data) <- NULL
data
data <- ranef(model)$subject %>%
mutate(subject = rownames(.)) %>%
mutate(intercept = `(Intercept)`) %>%
select(c(intercept, subject))
rownames(data) <- NULL
data
?left_join
data2 <- left_join(data, demo, c("subject", "participant_id"))
demo
data
data2 <- left_join(data, demo, c("subject" = "participant_id"))
data
data2
ggplot(data, aes(x=age, y=intercept, fill=sex, shape=handedness)) +
geom_point()
# merge with demo
data <- left_join(data, demo, c("subject" = "participant_id"))
# plot age
ggplot(data, aes(x=age, y=intercept, fill=sex, shape=handedness)) +
geom_point()
ggplot(data, aes(x=age, y=intercept, fill=sex, shape=handedness)) +
geom_point() +
facet_grid(sex ~handedness)
ggplot(data, aes(x=age, y=intercept, color=sex, shape=handedness)) +
geom_point() +
facet_grid(sex ~ .)
# plot age
ggplot(data, aes(x=age, y=intercept, color=sex, shape=handedness)) +
geom_point() #+
#facet_grid(sex ~ .)
ggplot(data, aes(x=age, y=intercept, color=sex, shape=handedness)) +
geom_point() +
geom_line()
ggplot(data, aes(x=age, y=intercept, color=sex, shape=handedness)) +
geom_point() +
geom_smooth()
ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point()
#facet_grid(sex ~ .)
ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(0) +
labs(x="Age", y="Random Intercept")
# plot age
ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(aes(y.intercept=0) +
labs(x="Age", y="Random Intercept")
# plot age
ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(aes(yintercept=0)) +
labs(x="Age", y="Random Intercept")
ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Age", y="Random Intercept")
ggplot(data, aes(x=sex, y=intercept)) +
boxplot(notches=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept")
ggplot(data, aes(x=sex, y=intercept)) +
geom_boxplot(notches=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept")
ggplot(data, aes(x=sex, y=intercept)) +
geom_boxplot(notch=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept")
# plot age
p1 <- ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Age", y="Random Intercept")
p2 <- ggplot(data, aes(x=sex, y=intercept, fill=sex)) +
geom_boxplot(notch=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept")
ggarrange(p1,p2)
library(ggpubr)
# plot age
p1 <- ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Age", y="Random Intercept")
p2 <- ggplot(data, aes(x=sex, y=intercept, fill=sex)) +
geom_boxplot(notch=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept")
ggarrange(p1,p2)
p2 <- ggplot(data, aes(x=sex, y=intercept, fill=sex)) +
geom_boxplot(notch=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept") +
guides(color = FALSE)
# plot age
p1 <- ggplot(data, aes(x=age, y=intercept, color=sex)) +
geom_point() +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Age", y="Random Intercept")
p2 <- ggplot(data, aes(x=sex, y=intercept, fill=sex)) +
geom_boxplot(notch=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept") +
guides(color = "none")
ggarrange(p1,p2)
p2 <- ggplot(data, aes(x=sex, y=intercept, fill=sex)) +
geom_boxplot(notch=TRUE) +
geom_hline(aes(yintercept=0), lty="dashed") +
labs(x="Sex", y="Random Intercept") +
guides(fill = "none")
ggarrange(p1,p2)
demo
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram()
ß3
p3
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram() +
geom_vline(aes(xintercept=0), lty="dashed") +
labs(x="Random Intercept", y="Count") +
scale_fill_viridis_d()
p3
ggarrange(p1,p2,p3)
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram() +
geom_vline(aes(xintercept=0), lty="dashed") +
labs(x="Random Intercept", y="Count") +
scale_fill_brewer()
p3
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram() +
geom_vline(aes(xintercept=0), lty="dashed") +
labs(x="Random Intercept", y="Count") +
scale_fill_discrete()
p3
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram() +
geom_vline(aes(xintercept=0), lty="dashed") +
labs(x="Random Intercept", y="Count") +
scale_fill_fermenter()
p3
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram() +
geom_vline(aes(xintercept=0), lty="dashed") +
labs(x="Random Intercept", y="Count") +
scale_fill_identity()
p3
p3 <- ggplot(data, aes(x=intercept, fill=handedness)) +
geom_histogram() +
geom_vline(aes(xintercept=0), lty="dashed") +
labs(x="Random Intercept", y="Count") +
scale_fill_viridis_d()
ggarrange(p1,p2,p3)
tar_make()
tar_read(demographics)
tar_read(demographics)
tar_make()
tar_read(demographics)
tar_read(demographics)
tar_make()
tar_make()
tar_make()
tar_read(rfx_demographics)
models <- tar_read(models_combined)
models <- tar_read(eegnet_HLM_exp)
models
model <- tar_read(eegnet_HLM_exp, branches=1)[[1]] # TODO: use pattern, and then combine the results
data <- ranef(model)
data
data <- ranef(model)$subject %>%
mutate(subject = rownames(.)) %>%
mutate(Intercept = `(Intercept)`) %>%
select(c(Intercept, subject))
rownames(data) <- NULL
data
data <- tar_read(data_eegnet_exp, branches=1)[[1]] # to get the EXP information
data
data <- tar_read(data_eegnet_exp, branches=1) #[[1]] # to get the EXP information
data
unique(data$tar_group)
model <- tar_read(eegnet_HLM_exp, branches=1)[[1]] # TODO: use pattern, and then combine the results
data <- tar_read(data_eegnet_exp, branches=1) %>% filter(tar_group==1) # to get the EXP information
data
experiment = unique(data$experiment)
experiment
data <- ranef(model)$subject %>%
mutate(Subject = rownames(.)) %>%
mutate(Intercept = `(Intercept)`) %>%
mutate(Experiment = unique(.$experiment)) %>%
select(c(Intercept, subject))
data
model <- tar_read(eegnet_HLM_exp, branches=1)[[1]] # TODO: use pattern, and then combine the results
orig_data <- tar_read(data_eegnet_exp, branches=1) %>% filter(tar_group==1) # to get the EXP information
# start here
experiment = unique(orig_data$experiment)
data <- ranef(model)$subject %>%
mutate(Subject = subject) %>%
mutate(Intercept = `(Intercept)`) %>%
mutate(Experiment = unique(.$experiment)) %>%
select(c(Intercept, Subject, Experiment))
data
ranef(model)
data <- ranef(model)$subject %>%
mutate(Subject = rownames()) %>%
mutate(Intercept = `(Intercept)`) %>%
mutate(Experiment = unique(.$experiment)) %>%
select(c(Intercept, Subject, Experiment))
data <- ranef(model)$subject %>%
mutate(Subject = rownames(.)) %>%
mutate(Intercept = `(Intercept)`) %>%
mutate(Experiment = unique(.$experiment)) %>%
select(c(Intercept, Subject, Experiment))
data <- ranef(model)$subject %>%
mutate(Subject = rownames(.)) %>%
mutate(Intercept = `(Intercept)`) %>%
mutate(Experiment = unique(orig_data$experiment)) %>%
select(c(Intercept, Subject, Experiment))
rownames(data) <- NULL
data
tar_make()
tar_read(rfx_exp)
tar_read(rfx_exp, branches=1)
tar_read(eegnet_HLM_exp, branches=1)
tar_read(data_eegnet_exp, branches=1)
tar_make()
tar_read(rfx_exp)
rbind(tar_read(rfx_exp))
tar_make()
tar_read(rfx_exp)
data <- tar_read(rfx_exp)
data
data %>%
group_by(Experiment) %>%
mutate(intercept_rank = rank(Intercept, ties.method = "min")) %>%
ggplot(aes(x = intercept_rank, y = Experiment, color = Subject, group = Subject)) +
geom_point(size = 3) +
geom_line() +
facet_wrap(~ Experiment, scales = "free") +
theme_bw()
data %>%
group_by(Experiment, Subject) %>%
summarize(Intercept = Intercept) %>% # Assuming you want the raw values
pivot_wider(names_from = Experiment, values_from = Intercept) %>%
ggplot(aes(x = Subject, y = Experiment)) +
geom_tile(aes(fill = Intercept)) +
scale_fill_gradient2() +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
data
data %>%
ggplot(aes(x = Experiment, y = Intercept, col=Subject)) +
line()
data
ggplot(data, aes(x = Experiment, y = Intercept, col=Subject)) +
geom_line()
ggplot(data, aes(x = Experiment, y = Intercept, color=Subject)) +
geom_line()
data
ggpaired(data, x = "Experiment", y = "Intercept",
color = "Subject",
line.color = "gray", line.size = 0.4,
palette = "jco")+
stat_compare_means(paired = TRUE)
?ggpairs
??ggpairs
library("GGally")
install.packages("GGally")
library("GGally")
?ggpairs
ggpairs(data)
data
wide_data <- data %>% pivot_wider(names_from = Experiment, values_from = "Intercept")
wide_data
ggpairs(data, aes(col=Subject))
ggpairs(wide_data)
ggpairs(wide_data, aes(col=Subject))
ggpairs(wide_data, aes(color=Subject))
wide_data <- data %>%
pivot_wider(names_from = Experiment, values_from = "Intercept") %>%
select(-c("Subject")) # remove sub for now
ggpairs(wide_data)
tar_make()
tar_make()
tar_read(rfx_exp_plt)
tar_make()
tar_read(heatmaps)
tar_make()
source("~/GitHub/m4d/targets/renv/activate.R", echo=TRUE)
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_read(rfx_demographics)
#| echo: false
tar_read(heatmaps_plot)
#| echo: false
tar_read(heatmaps_file)
#| echo: false
tar_read(heatmaps)
tar_make()
tar_visnetwork()
model = tar_read(sliding_LMi_exp, branches=1)
model
model = tar_read(sliding_LMi_exp, branches=1)[[1]]
model
summary(model)
model = tar_read(sliding_LMi_exp, branches=1)[[1]]
summary(model)
tar_make()
model = tar_read(sliding_LMi_exp, branches=1)[[1]]
summary(model)
tar_make()
model = tar_read(sliding_LMi_exp, branches=1)[[1]]
summary(model)
tar_make()
model = tar_read(sliding_LMi_exp, branches=1)[[1]]
summary(model)
model = tar_read(sliding_LM_exp, branches=1)[[1]]
summary(model)
