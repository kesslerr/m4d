y = 0.9, ##0.9-d*i,
width = 0.1, height = 0.1)
}
cow
# Create the tile plot
p1 <- ggplot(data_long_rec, aes(x = Column, y = Row, fill = Value)) + # y = as.factor(Row)
geom_tile() + # color = "white"
scale_y_reverse() + # reverse y, so that best pipeline is top, worst is bottom
scale_fill_manual(values = cols_seq) + #c("Low" = "blue", "Medium" = "yellow", "High" = "red")) +
theme_minimal() +
labs(title = "Ordered Forking Paths", x = "Processing Step", y = "Ranked Forking Path", fill = "Processing\nChoice") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.position="none") +
facet_grid(.~experiment) #, scales = "free_x"
#p1
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0.3, y = 0.3, width = 1.0, height = 0.7)
d <- 1/8
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i, #+0.05,
y = 0.05, ##0.9-d*i,
width = 0.1, height = 0.2)
}
cow
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0.3, width = 1.0, height = 0.7)
d <- 1/8
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i, #+0.05,
y = 0.05, ##0.9-d*i,
width = 0.1, height = 0.2)
}
cow
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0.15, width = 1.0, height = 0.7)
d <- 1/8
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i, #+0.05,
y = 0.05, ##0.9-d*i,
width = 0.1, height = 0.1)
}
cow
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0.15, width = 1.0, height = 0.85)
d <- 1/8
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i, #+0.05,
y = 0.05, ##0.9-d*i,
width = 0.1, height = 0.1)
}
cow
p1 <- ggplot(data_long_rec, aes(x = Column, y = Row, fill = Value)) + # y = as.factor(Row)
geom_tile() + # color = "white"
scale_y_reverse() + # reverse y, so that best pipeline is top, worst is bottom
scale_fill_manual(values = cols_seq) + #c("Low" = "blue", "Medium" = "yellow", "High" = "red")) +
theme_minimal() +
labs(#title = "Ordered Forking Paths",
x = "Processing Step",
y = "Ranked Forking Path",
fill = "Processing\nChoice") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.position="none") +
facet_grid(.~experiment) #, scales = "free_x"
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0.15, width = 1.0, height = 0.85)
d <- 1/8
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i, #+0.05,
y = 0.05, ##0.9-d*i,
width = 0.07, height = 0.07)
}
cow
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0.15, width = 1.0, height = 0.85)
d <- 1/8
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i, #+0.05,
y = 0.05, ##0.9-d*i,
width = 0.1, height = 0.1)
}
cow
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0.2, width = 1.0, height = 0.85)
d <- 1/8
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i, #+0.05,
y = 0.05, ##0.9-d*i,
width = 0.1, height = 0.1)
}
cow
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0.2, width = 1.0, height = 0.85)
d <- 1/8
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i, #+0.05,
y = 0.1, ##0.9-d*i,
width = 0.1, height = 0.08)
}
cow
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0.2, width = 1.0, height = 0.85)
d <- 1/8
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.1, #+0.05,
y = 0.1, ##0.9-d*i,
width = 0.08, height = 0.06)
}
cow
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0.2, width = 1.0, height = 0.85)
d <- 1/8
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05, #+0.05,
y = 0.1, ##0.9-d*i,
width = 0.06, height = 0.06)
}
cow
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0.25, width = 1.0, height = 0.85)
d <- 1/8
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05, #+0.05,
y = 0.1, ##0.9-d*i,
width = 0.06, height = 0.06)
}
cow
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0.25, width = 1.0, height = 0.75)
d <- 1/8
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05, #+0.05,
y = 0.1, ##0.9-d*i,
width = 0.06, height = 0.06)
}
cow
data_eegnet
tar_read(data_eegnet)
tar_read(data_sliding)
tar_read(data_tsum)
data <- tar_read(data_tsum)
if (names(data)[1] == "tsum") {
data <- data %>% rename(accuracy = tsum)
}
data
title="Time-resolved"
# average off accuracy across subs
result <- data %>%
group_by(emc, mac, lpf, hpf, ref, det, base, ar, experiment) %>%
summarize(avg_accuracy = mean(accuracy), .groups = 'drop')
# order the data by avg_accuracy descending (per experiment)
result <- result %>%
group_by(experiment) %>%
arrange(desc(avg_accuracy)) %>%
mutate(rank = row_number()) #%>%
#ungroup()
#result_ERN <- result %>% filter(experiment == "ERN") %>% select(-c(avg_accuracy, rank, experiment))
result <- result %>% select(-c(avg_accuracy, rank)) #, rank
# Transform the data into a long format
data_long <- result %>%
group_by(experiment) %>%
mutate(Row = row_number()) %>% #row_number()
pivot_longer(cols = -c(experiment,Row), names_to = "Column", values_to = "Value") %>%
ungroup()
#mutate(experiment=result$experiment)
#head(200)
# order the steps according to their temporal MV order
data_long$Column = factor(data_long$Column, level=c("emc", "mac", "lpf", "hpf", "ref", "det", "base", "ar"))
data_long_rec <- data_long %>%
mutate(Column = recode(Column, !!!replacements_sparse)) %>%
mutate(Value = recode(Value, !!!replacements_sparse))
# Create the tile plot
p1 <- ggplot(data_long_rec, aes(x = Column, y = Row, fill = Value)) + # y = as.factor(Row)
geom_tile() + # color = "white"
scale_y_reverse() + # reverse y, so that best pipeline is top, worst is bottom
scale_fill_manual(values = cols_seq) + #c("Low" = "blue", "Medium" = "yellow", "High" = "red")) +
theme_minimal() +
labs(title = title,#"Ordered Forking Paths",
x = "Processing Step",
y = "Ranked Forking Path",
fill = "Processing\nChoice") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.position="none") +
facet_grid(.~experiment) #, scales = "free_x"
#p1
# get legends for each processing step
leg_data <- data_long_rec %>%
filter(experiment=="ERN")
unique_steps <- unique(leg_data$Column)
legends = list()
for (step in unique_steps){
this_leg_data <- leg_data %>% filter(Column == step)
ptmp <- ggplot(this_leg_data, aes(x = Column, y = Row, fill = Value)) +
geom_tile() +
scale_fill_manual(values = cols_seq) +
theme_minimal() +
labs(fill=step) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
legend <- ggpubr::as_ggplot(ggpubr::get_legend(ptmp))
legends <- c(legends, list(legend))
}
#legends
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0.25, width = 1.0, height = 0.75)
d <- 1/8
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05, #+0.05,
y = 0.1, ##0.9-d*i,
width = 0.06, height = 0.06)
}
cow
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0.25, width = 1.0, height = 0.75)
d <- 1/8
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05, #+0.05,
y = 0.1, ##0.9-d*i,
width = 0.03, height = 0.03)
}
cow
tar_make()
tar_make()
tar_make()
tar_make()
class(data)
data
class(data) == "tbl_df"
class(data)[1] == "tbl_df"
legends = list()
length(legends)
data1 = tar_read(data_eegnet)
data2 = tar_read(data_tsum)
title1="EEGNet"
title2="Time-resolved"
data <- list(data1, data2)
title <- list(title1, title2)
# rename tsum to accuracy
data2 <- data2 %>% rename(accuracy = tsum)
legends = list()
plots = list()
data <- list(data1, data2)
title <- list(title1, title2)
for (it in c(1,2)){
thisData = data[[it]]
thisTitle = title[[it]]
# average off accuracy across subs
result <- thisData %>%
group_by(emc, mac, lpf, hpf, ref, det, base, ar, experiment) %>%
summarize(avg_accuracy = mean(accuracy), .groups = 'drop')
# order the data by avg_accuracy descending (per experiment)
result <- result %>%
group_by(experiment) %>%
arrange(desc(avg_accuracy)) %>%
mutate(rank = row_number()) #%>%
#ungroup()
#result_ERN <- result %>% filter(experiment == "ERN") %>% select(-c(avg_accuracy, rank, experiment))
result <- result %>% select(-c(avg_accuracy, rank)) #, rank
# Transform the data into a long format
data_long <- result %>%
group_by(experiment) %>%
mutate(Row = row_number()) %>% #row_number()
pivot_longer(cols = -c(experiment,Row), names_to = "Column", values_to = "Value") %>%
ungroup()
#mutate(experiment=result$experiment)
#head(200)
# order the steps according to their temporal MV order
data_long$Column = factor(data_long$Column, level=c("emc", "mac", "lpf", "hpf", "ref", "det", "base", "ar"))
data_long_rec <- data_long %>%
mutate(Column = recode(Column, !!!replacements_sparse)) %>%
mutate(Value = recode(Value, !!!replacements_sparse))
# Create the tile plot
p1 <- ggplot(data_long_rec, aes(x = Column, y = Row, fill = Value)) + # y = as.factor(Row)
geom_tile() + # color = "white"
scale_y_reverse() + # reverse y, so that best pipeline is top, worst is bottom
scale_fill_manual(values = cols_seq) + #c("Low" = "blue", "Medium" = "yellow", "High" = "red")) +
theme_minimal() +
labs(title = thisTitle,#"Ordered Forking Paths",
x = "Processing Step",
y = "Ranked Forking Path",
fill = "Processing\nChoice") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.position="none") +
facet_grid(.~experiment) #, scales = "free_x"
plots = c(plots, list(p1))
#p1
if (length(legends) == 0){
# get legends for each processing step
leg_data <- data_long_rec %>%
filter(experiment=="ERN")
unique_steps <- unique(leg_data$Column)
legends = list()
for (step in unique_steps){
this_leg_data <- leg_data %>% filter(Column == step)
ptmp <- ggplot(this_leg_data, aes(x = Column, y = Row, fill = Value)) +
geom_tile() +
scale_fill_manual(values = cols_seq) +
theme_minimal() +
labs(fill=step) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
legend <- ggpubr::as_ggplot(ggpubr::get_legend(ptmp))
legends <- c(legends, list(legend))
}
#legends
}
}
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(plots[1], x = 0, y = 0.6, width = 1.0, height = 0.4) +
cowplot::draw_plot(plots[2], x = 0, y = 0.2, width = 1.0, height = 0.4)
d <- 1/8
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05, #+0.05,
y = 0.05, ##0.9-d*i,
width = 0.03, height = 0.03)
}
cow
plots
legends
plots[[1]]
# rename tsum to accuracy
data2 <- data2 %>% rename(accuracy = tsum)
# rename tsum to accuracy
data2 <- data2 %>% rename(accuracy = tsum)
data1 = tar_read(data_eegnet)
data2 = tar_read(data_tsum)
title1="EEGNet"
title2="Time-resolved"
# rename tsum to accuracy
data2 <- data2 %>% rename(accuracy = tsum)
legends = list()
plots = list()
data <- list(data1, data2)
title <- list(title1, title2)
for (it in c(1,2)){
thisData = data[[it]]
thisTitle = title[[it]]
# average off accuracy across subs
result <- thisData %>%
group_by(emc, mac, lpf, hpf, ref, det, base, ar, experiment) %>%
summarize(avg_accuracy = mean(accuracy), .groups = 'drop')
# order the data by avg_accuracy descending (per experiment)
result <- result %>%
group_by(experiment) %>%
arrange(desc(avg_accuracy)) %>%
mutate(rank = row_number()) #%>%
#ungroup()
#result_ERN <- result %>% filter(experiment == "ERN") %>% select(-c(avg_accuracy, rank, experiment))
result <- result %>% select(-c(avg_accuracy, rank)) #, rank
# Transform the data into a long format
data_long <- result %>%
group_by(experiment) %>%
mutate(Row = row_number()) %>% #row_number()
pivot_longer(cols = -c(experiment,Row), names_to = "Column", values_to = "Value") %>%
ungroup()
#mutate(experiment=result$experiment)
#head(200)
# order the steps according to their temporal MV order
data_long$Column = factor(data_long$Column, level=c("emc", "mac", "lpf", "hpf", "ref", "det", "base", "ar"))
data_long_rec <- data_long %>%
mutate(Column = recode(Column, !!!replacements_sparse)) %>%
mutate(Value = recode(Value, !!!replacements_sparse))
# Create the tile plot
p1 <- ggplot(data_long_rec, aes(x = Column, y = Row, fill = Value)) + # y = as.factor(Row)
geom_tile() + # color = "white"
scale_y_reverse() + # reverse y, so that best pipeline is top, worst is bottom
scale_fill_manual(values = cols_seq) + #c("Low" = "blue", "Medium" = "yellow", "High" = "red")) +
theme_minimal() +
labs(title = thisTitle,#"Ordered Forking Paths",
x = "Processing Step",
y = "Ranked Forking Path",
fill = "Processing\nChoice") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.position="none") +
facet_grid(.~experiment) #, scales = "free_x"
plots = c(plots, list(p1))
#p1
if (length(legends) == 0){
# get legends for each processing step
leg_data <- data_long_rec %>%
filter(experiment=="ERN")
unique_steps <- unique(leg_data$Column)
legends = list()
for (step in unique_steps){
this_leg_data <- leg_data %>% filter(Column == step)
ptmp <- ggplot(this_leg_data, aes(x = Column, y = Row, fill = Value)) +
geom_tile() +
scale_fill_manual(values = cols_seq) +
theme_minimal() +
labs(fill=step) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
legend <- ggpubr::as_ggplot(ggpubr::get_legend(ptmp))
legends <- c(legends, list(legend))
}
#legends
}
}
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(plots[[1]], x = 0, y = 0.6, width = 1.0, height = 0.4) +
cowplot::draw_plot(plots[[2]], x = 0, y = 0.2, width = 1.0, height = 0.4)
d <- 1/8
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05, #+0.05,
y = 0.05, ##0.9-d*i,
width = 0.03, height = 0.03)
}
cow
plots
cow <- cowplot::ggdraw() +
cowplot::draw_plot(plots[[1]], x = 0, y = 0.6, width = 1.0, height = 0.4) +
cowplot::draw_plot(plots[[2]], x = 0, y = 0.2, width = 1.0, height = 0.4)
cow
d <- 1/8
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05, #+0.05,
y = 0.05, ##0.9-d*i,
width = 0.03, height = 0.03)
}
cow
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(plots[[1]], x = 0, y = 0.6, width = 1.0, height = 0.4) +
cowplot::draw_plot(plots[[2]], x = 0, y = 0.2, width = 1.0, height = 0.4)
d <- 1/8
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05, #+0.05,
y = 0.07, ##0.9-d*i,
width = 0.03, height = 0.03)
}
cow
# put legends on plot
cow <- cowplot::ggdraw() +
cowplot::draw_plot(plots[[1]], x = 0, y = 0.6, width = 1.0, height = 0.4) +
cowplot::draw_plot(plots[[2]], x = 0, y = 0.2, width = 1.0, height = 0.4)
d <- 1/8
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05, #+0.05,
y = 0.09, ##0.9-d*i,
width = 0.03, height = 0.03)
}
cow
tar_make()
tar_make()
tar_make()
tar_make()
tar_visnetwork()
tar_visnetwork()
tar_visnetwork()
tar_make()
tar_visnetwork()
tar_make()
tar_make()
tar_make()
tar_read(eegnet_HLM_qq)
tar_read(sliding_LM_qq)
tar_read(sliding_LM_qq_comb)
tar_read(eegnet_HLM_qq_comb)
