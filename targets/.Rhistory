}
}
}
cow
## legends on diagonals
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0, width = 1.0, height = 1.0)
if (only_upper_diag==FALSE){
d <- 1/8.5
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05,
y = 0.9-d*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<7){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.85-d*i, 0.85-d*i),
color = "grey", size = 0.5)
}
}
} else {
c <- 1/8.5 # x
d <- 1/7.5 # y
e <- 1/8
for (i in 0:6){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = c*i+0.05,
y = 0.85-d*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<6){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.83-d*i, 0.83-d*i),
color = "grey", size = 0.5)
}
}
}
cow
## legends on diagonals
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0, width = 1.0, height = 1.0)
if (only_upper_diag==FALSE){
d <- 1/8.5
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05,
y = 0.9-d*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<7){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.85-d*i, 0.85-d*i),
color = "grey", size = 0.5)
}
}
} else {
c <- 1/8.5 # x
d <- 1/7.5 # y
e <- 1/8
for (i in 0:6){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = c*i+0.05,
y = 0.85-d*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<6){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.87-d*i, 0.83-d*i),
color = "grey", size = 0.5)
}
}
}
cow
## legends on diagonals
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0, width = 1.0, height = 1.0)
if (only_upper_diag==FALSE){
d <- 1/8.5
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05,
y = 0.9-d*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<7){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.85-d*i, 0.85-d*i),
color = "grey", size = 0.5)
}
}
} else {
c <- 1/8.5 # x
d1 <- 1/8.5 # y leg
d2 <- 1/7.5 # y line
e <- 1/8
for (i in 0:6){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = c*i+0.05,
y = 0.85-d1*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<6){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.83-d2*i, 0.83-d2*i),
color = "grey", size = 0.5)
}
}
}
cow
## legends on diagonals
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0, width = 1.0, height = 1.0)
if (only_upper_diag==FALSE){
d <- 1/8.5
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05,
y = 0.9-d*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<7){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.85-d*i, 0.85-d*i),
color = "grey", size = 0.5)
}
}
} else {
c <- 1/8.5 # x
d1 <- 1/8. # y leg
d2 <- 1/7.5 # y line
e <- 1/8
for (i in 0:6){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = c*i+0.05,
y = 0.85-d1*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<6){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.83-d2*i, 0.83-d2*i),
color = "grey", size = 0.5)
}
}
}
cow
## legends on diagonals
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0, width = 1.0, height = 1.0)
if (only_upper_diag==FALSE){
d <- 1/8.5
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05,
y = 0.9-d*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<7){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.85-d*i, 0.85-d*i),
color = "grey", size = 0.5)
}
}
} else {
c <- 1/8.5 # x
d1 <- 1/7.8 # y leg
d2 <- 1/7.5 # y line
e <- 1/8
for (i in 0:6){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = c*i+0.05,
y = 0.88-d1*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<6){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.83-d2*i, 0.83-d2*i),
color = "grey", size = 0.5)
}
}
}
cow
## legends on diagonals
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0, width = 1.0, height = 1.0)
if (only_upper_diag==FALSE){
d <- 1/8.5
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05,
y = 0.9-d*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<7){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.85-d*i, 0.85-d*i),
color = "grey", size = 0.5)
}
}
} else {
c <- 1/8.5 # x
d1 <- 1/8. # y leg
d2 <- 1/7.5 # y line
e <- 1/8
for (i in 0:6){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = c*i+0.05,
y = 0.88-d1*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<6){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.83-d2*i, 0.83-d2*i),
color = "grey", size = 0.5)
}
}
}
cow
## legends on diagonals
cow <- cowplot::ggdraw() +
cowplot::draw_plot(p1, x = 0, y = 0, width = 1.0, height = 1.0)
if (only_upper_diag==FALSE){
d <- 1/8.5
e <- 1/9
for (i in 0:7){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = d*i+0.05,
y = 0.9-d*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<7){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.85-d*i, 0.85-d*i),
color = "grey", size = 0.5)
}
}
} else {
c <- 1/8.5 # x
d1 <- 1/7.6 # y leg
d2 <- 1/7.5 # y line
e <- 1/8
for (i in 0:6){
# single legends
cow <- cow + cowplot::draw_plot(legends[[i+1]],
x = c*i+0.05,
y = 0.88-d1*i,
width = 0.1, height = 0.03)
# horizontal lines between facets
if (i<6){
cow <- cow + cowplot::draw_line(x = c(0.05, 0.97),
y = c(0.83-d2*i, 0.83-d2*i),
color = "grey", size = 0.5)
}
}
}
cow
tar_make()
tar_make()
source("~/GitHub/m4d/targets/renv/activate.R", echo=TRUE)
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_make()
tar_make()
tar_make()
?recode
?recode
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_make()
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_make()
tar_make()
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_make()
tar_make()
tar_make()
source("~/GitHub/m4d/targets/renv/activate.R", echo=TRUE)
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_make()
model <- tar_read(eegnet_HLMi2, branches=1)[[1]]
demographics <- tar_read(demographics)
orig_data <- tar_read(data_eegnet_exp) %>% filter(experiment == "ERN")
library(dplyr)
model <- tar_read(eegnet_HLMi2, branches=1)[[1]]
demographics <- tar_read(demographics)
orig_data <- tar_read(data_eegnet_exp) %>% filter(experiment == "ERN")
# from rfx_vis function
data <- lme4::ranef(model)$subject %>%
mutate(Subject = rownames(.)) %>%
mutate(Intercept = `(Intercept)`) %>%
select(c(Intercept, Subject))
rownames(data) <- NULL
experiment <- unique(orig_data$experiment)
# merge with demographics
data <- left_join(data, demographics, c("Subject" = "participant_id"))
data
demographics
demographics <- demographics %>%
mutate(handedness = toupper(handedness))
demographics
demographics <- demographics %>%
mutate(handedness = ifelse(handedness == "left", "Left", handedness)) %>%
mutate(handedness = ifelse(handedness == "right", "Right", handedness))
model <- tar_read(eegnet_HLMi2, branches=1)[[1]]
demographics <- tar_read(demographics)
orig_data <- tar_read(data_eegnet_exp) %>% filter(experiment == "ERN")
# from rfx_vis function
data <- lme4::ranef(model)$subject %>%
mutate(Subject = rownames(.)) %>%
mutate(Intercept = `(Intercept)`) %>%
select(c(Intercept, Subject))
rownames(data) <- NULL
experiment <- unique(orig_data$experiment)
# merge with demographics
data <- left_join(data, demographics, c("Subject" = "participant_id"))
data
model <- tar_read(eegnet_HLMi2, branches=1)[[1]]
demographics <- tar_read(demographics)
orig_data <- tar_read(data_eegnet_exp) %>% filter(experiment == "ERN")
demographics <- demographics %>%
mutate(handedness = ifelse(handedness == "left", "Left", handedness)) %>%
mutate(handedness = ifelse(handedness == "right", "Right", handedness))
# from rfx_vis function
data <- lme4::ranef(model)$subject %>%
mutate(Subject = rownames(.)) %>%
mutate(Intercept = `(Intercept)`) %>%
select(c(Intercept, Subject))
rownames(data) <- NULL
experiment <- unique(orig_data$experiment)
# merge with demographics
data <- left_join(data, demographics, c("Subject" = "participant_id"))
data
model <- tar_read(eegnet_HLMi2, branches=1)[[1]]
demographics <- tar_read(demographics)
orig_data <- tar_read(data_eegnet_exp) %>% filter(experiment == "ERN")
demographics
demographics$handedness <- factor(demographics$handedness,
levels = c("left", "right"),
labels = c("Left", "Right"))
demographics
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_make()
# from rfx_vis function
data <- lme4::ranef(model)$subject %>%
mutate(Subject = rownames(.)) %>%
mutate(Intercept = `(Intercept)`) %>%
select(c(Intercept, Subject))
rownames(data) <- NULL
experiment <- unique(orig_data$experiment)
# merge with demographics
data <- left_join(data, demographics, c("Subject" = "participant_id"))
data
males <- data[data$sex == "Male", ]
females <- data[data$sex == "Female", ]
males
length(males)
dim(males)
dim(females)
t_result <- t.test(males$Intercept, females$Intercept, var.equal = TRUE)
t_result
?wilcox.test
wilcox.test(males$Intercept, females$Intercept,
alternative = "two.sided",
paired = FALSE,
exact = FALSE,
correct = FALSE,
conf.int = FALSE)
w_result = wilcox.test(males$Intercept, females$Intercept,
alternative = "two.sided",
paired = FALSE,
exact = FALSE,
correct = FALSE,
conf.int = FALSE)
w_result$p.value
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_make()
?cowplot::ggdraw
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_make()
tar_make()
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_make()
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_make()
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE), tar_make()
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE); tar_make()
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE); tar_make()
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE); tar_make()
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE); tar_make()
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE); tar_make()
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE); tar_make()
tar_make()
tar_make()
tar_make()
test = tar_read(sliding_LMi2_ALT)
test = tar_read(data_tsum_exp_ALT)
test
data_tsum_exp_ALT
test = tar_read(data_tsum_exp_ALT)
test
tar_read(overview_ALT)
data <- read_csv("../models/eegnet_original_order.csv")
library(dplyr)
data <- read_csv("../models/eegnet_original_order.csv")
?read.csv
?read_csv
??read_csv
library(tidyverse)
?read_csv
data <- read_csv("../models/eegnet_original_order.csv")
data <- read_csv("../models/eegnet_original_order.csv", col_types = cols())
data
data$hpf <- factor(data$hpf, levels = c("None", "0.1", "0.5"))
data$lpf <- factor(data$lpf, levels = c("None", "6", "20", "45"))
data$ref <- factor(data$ref, levels = c("average", "Cz", "P9P10"))
data$emc <- factor(data$emc, levels = c("None", "ica"))
data$mac <- factor(data$mac, levels = c("None", "ica"))
data$base <- factor(data$base, levels = c("200ms", "400ms")) #"None",
data$det <- factor(data$det, levels = c("offset", "linear"))
data$ar <- factor(tolower(data$ar), levels = c("False", "True"))
#data$ar <- factor(data$ar, levels = c("FALSE", "TRUE"))
data$experiment <- factor(data$experiment, levels = c("ERN", "LRP", "MMN", "N170", "N2pc", "N400", "P3")) #, "LRP_6-9", "LRP_10-11", "LRP_12-13", "LRP_14-17", "LRP_18+", "6-9", "10-11", "12-13", "14-17", "18+"
data
data <- read_csv("../models/eegnet_original_order.csv", col_types = cols())
data
# new, preprocess already
data$hpf <- factor(data$hpf, levels = c("None", "0.1", "0.5"))
data$lpf <- factor(data$lpf, levels = c("None", "6", "20", "45"))
data$ref <- factor(data$ref, levels = c("average", "Cz", "P9P10"))
data$emc <- factor(data$emc, levels = c("None", "ica"))
data$mac <- factor(data$mac, levels = c("None", "ica"))
data$base <- factor(data$base, levels = c("200ms", "400ms")) #"None",
data$det <- factor(data$det, levels = c("offset", "linear"))
data$ar <- factor(tolower(data$ar), levels = c("FALSE", "TRUE"))
#data$ar <- factor(data$ar, levels = c("FALSE", "TRUE"))
data$experiment <- factor(data$experiment, levels = c("ERN", "LRP", "MMN", "N170", "N2pc", "N400", "P3")) #, "LRP_6-9", "LRP_10-11", "LRP_12-13", "LRP_14-17", "LRP_18+", "6-9", "10-11", "12-13", "14-17", "18+"
#data$dataset <- factor(data$dataset)
data
data <- read_csv("../models/eegnet_original_order.csv", col_types = cols())
# new, preprocess already
data$hpf <- factor(data$hpf, levels = c("None", "0.1", "0.5"))
data$lpf <- factor(data$lpf, levels = c("None", "6", "20", "45"))
data$ref <- factor(data$ref, levels = c("average", "Cz", "P9P10"))
data$emc <- factor(data$emc, levels = c("None", "ica"))
data$mac <- factor(data$mac, levels = c("None", "ica"))
data$base <- factor(data$base, levels = c("200ms", "400ms")) #"None",
data$det <- factor(data$det, levels = c("offset", "linear"))
data$ar <- factor(tolower(data$ar), levels = c("false", "true"))
#data$ar <- factor(data$ar, levels = c("FALSE", "TRUE"))
data$experiment <- factor(data$experiment, levels = c("ERN", "LRP", "MMN", "N170", "N2pc", "N400", "P3")) #, "LRP_6-9", "LRP_10-11", "LRP_12-13", "LRP_14-17", "LRP_18+", "6-9", "10-11", "12-13", "14-17", "18+"
#data$dataset <- factor(data$dataset)
if ("dataset" %in% names(data)) {
data <- subset(data, select = -c(dataset))
}
data
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_make()
data <- tar_read(data_eegnet_exp_ALT)
data
model<- tar_read(eegnet_HLMi2_ALT)[[1]]
model
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE)
tar_make()
tar_read(overview_ALT)
data <- read_csv("../models/eegnet_original_order.csv", col_types = cols())
data
unique(data$dataset)
# new, preprocess already
data$hpf <- factor(data$hpf, levels = c("None", "0.1", "0.5"))
data$lpf <- factor(data$lpf, levels = c("None", "6", "20", "45"))
data$ref <- factor(data$ref, levels = c("average", "Cz", "P9P10"))
data$emc <- factor(data$emc, levels = c("None", "ica"))
data$mac <- factor(data$mac, levels = c("None", "ica"))
data$base <- factor(data$base, levels = c("200ms", "400ms")) #"None",
data$det <- factor(data$det, levels = c("offset", "linear"))
#data$ar <- factor(tolower(data$ar), levels = c("false", "true"))
data$ar <- factor(data$ar, levels = c("FALSE", "TRUE"))
data$experiment <- factor(data$experiment, levels = c("ERN", "LRP", "MMN", "N170", "N2pc", "N400", "P3")) #, "LRP_6-9", "LRP_10-11", "LRP_12-13", "LRP_14-17", "LRP_18+", "6-9", "10-11", "12-13", "14-17", "18+"
data$dataset <- factor(data$dataset)
# discard MIPDB dataset
data <- subset(data, dataset != "MIPDB")
if ("dataset" %in% names(data)) {
data <- subset(data, select = -c(dataset))
}
data
model
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE); tar_make()
tar_read(data_tsum_ALT)
tar_read(eegnet_HLM_emm_means_ALT)
source("~/GitHub/m4d/targets/_targets.R", echo=TRUE); tar_make()
